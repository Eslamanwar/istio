{{- $conf := index .Values .Values.global.env -}}
{{- $def := index .Values "default" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "gateway-service.fullname" . }}
  labels:
    app: {{ template "gateway-service.name" . }}
    chart: {{ template "gateway-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ default $def.replicas $conf.replicas }}
  selector:
    matchLabels:
      app: {{ template "gateway-service.name" . }}
      release: {{ .Release.Name }}
  minReadySeconds: 5
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "gateway-service.name" . }}
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
      - name: {{ .Values.image.image_secret_name }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            limits:
              memory: "{{ default $def.memory_limit $conf.memory_limit }}"
            requests:
              cpu: 100m
              memory: 256Mi
          ports:
          - name: root
            containerPort: 8083
            protocol: TCP
          envFrom:
          - configMapRef:
              name: {{ template "gateway-service.fullname" . }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8083
            initialDelaySeconds: 130
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8083
            initialDelaySeconds: 60
            timeoutSeconds: 5
